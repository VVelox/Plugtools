#!perl

use strict;
use warnings;
use Getopt::Std;
use Plugtools;

$Getopt::Std::STANDARD_HELP_VERSION = 1;

#version function
sub main::VERSION_MESSAGE {
        print "plgmod 0.0.0\n";
}

#print help
sub main::HELP_MESSAGE {
        print "\n".
		      "-g <group name>  - The group to act on.\n".
			  "-a <action>  - The action to perform.\n".
			  "-u <user>  - The user to use.\n".
			  "-G <gid>  - The GID to use.\n".
			  "-l  - This dumps change changed LDAP entry.\n".
			  "-U <userUpdate>  - When doing the gid action, correct any user with it as their primary GID.\n".
			  "\n".
			  "Both -g and -a are required. Then additional ones may be required on what is specified.\n".
			  "\n".
			  "actions:\n".
			  "add - This adds a user to a group.\n".
			  "remove -  This removes a user from a group.\n".
			  "gid - Change the GID of a group to the specified GID.\n".
			  "\n".
			  "requirements:\n".
			  "add - -g, -u\n".
			  "remove - -g, -u\n".
			  "gid - -g, -G\n".
			  "\n".
			  "For more info, see the the perldocs for Plugtools and plgmod...\n".
			  "perldoc plgmod\n".
			  "perldoc Plugtools\n";
}

#gets the options
my %opts=();
getopts('g:u:a:G:l', \%opts);

if (!defined($opts{g})) {
	warn('plgadd:254: No group name specified');
	exit 254;
}

if (!defined($opts{a})) {
	warn('plgadd:253: No action specified');
	exit 25;
}

my $pt=Plugtools->new;
if ($pt->{error}) {
	warn('plgadd: Failed to initialize the Plugtools object');
	exit $pt->{error};
}

#process add requests
if ($opts{a} eq 'add') {
	$pt->groupAddUser({
					   user=>$opts{u},
					   group=>$opts{g},
					   dump=>$opts{l},
					   });
	if ($pt->{error}) {
		warn('plgmod: groupAddUser errored');
		exit $pt->{error};
	}
}

#process remove requests
if ($opts{a} eq 'remove') {
	$pt->groupAddUser({
					   user=>$opts{u},
					   group=>$opts{g},
					   dump=>$opts{l},
					   });
	if ($pt->{error}) {
		warn('plgmod: groupAddUser errored');
		exit $pt->{error};
	}
}

#process remove requests
if ($opts{a} eq 'gid') {
	$pt->groupGIDchange({
					   gid=>$opts{G},
					   group=>$opts{g},
					   dump=>$opts{l},
					   });
	if ($pt->{error}) {
		warn('plgmod: groupGIDchange errored');
		exit $pt->{error};
	}
}

exit 0;

=head1 NAME

plgmod - Modify a group setup in LDAP.

=head1 SYNOPSIS

plgmod B<-g> <group> B<-a> add [B<-u> <user>] [B<-l>]
plgmod B<-g> <group> B<-a> remove [B<-u> <user>] [B<-l>]
plgmod B<-g> <group> B<-a> gid [B<-G> <gid>] [B<-l>] [B<-U> (0|1)]

=head1 SWITCHES

=head2 -g <group>

This specifies the group to modify.

=head2 -a <action>

The action to perform. Only one of these will be done at a time.

=head3 add

Add a user to a group.

=head3 gid

Change the GID of a group.

=head3 remove

Remove a user from a group.

=head2 -l

If this is specified, any modified LDAP entry is printed to STDOUT.

=head2 -u <user>

The user to add or remove from a group.

=head2 -g <gid>

The new GID for a group.

=head2 -U (0|1)

This is a boolean value indicating if the users should be checked and possibly
updated if the GID of a group is changed.

=head1 EXIT CODES

If the exit code is not listed below, it is what was the error code returned by Plugtools.

=head2 254

No group specified.

=head2 253

No action specified.

=head1 ACKNOWLEDGEMENTS

=head1 LICENSE AND COPYRIGHT

This software is Copyright (c) 2023 by Zane C. Bowers-Hadley.

This is free software, licensed under:

  The Artistic License 2.0 (GPL Compatible)

=cut
