#!perl

use strict;
use warnings;
use Getopt::Std;
use Plugtools;
use Term::ReadKey;

$Getopt::Std::STANDARD_HELP_VERSION = 1;

#version function
sub main::VERSION_MESSAGE {
	print "plupass 0.0.0\n";
}

#print help
sub main::HELP_MESSAGE {
	print "\n"
		. "-u <user>  - The user to remove.\n" . "\n"
		. "For more info, see the the perldocs for Plugtools and plupass...\n"
		. "perldoc plupass\n"
		. "perldoc Plugtools\n";
}

#gets the options
my %opts = ();
getopts( 'u:G:H:', \%opts );

if ( !defined( $opts{u} ) ) {
	warn('plgrm:254: No user name specified');
	exit 254;
}

my $pt = Plugtools->new;
if ( $pt->{error} ) {
	warn('plupass: Failed to initialize the Plugtools object');
	exit $pt->{error};
}

#ask for the password
ReadMode(4);
print 'password:';
my $pass1 = <STDIN>;
print "\npassword:";
my $pass2 = <STDIN>;
print "\n";
ReadMode(0);

if ( $pass1 ne $pass2 ) {
	warn('plupass:253: The passwords are not the same');
}

chomp($pass1);

$pt->userSetPass(
	{
		user => $opts{u},
		pass => $pass1,
	}
);
if ( $pt->{error} ) {
	warn('plupass: Failed set the password for the user');
	exit $pt->{error};
}

exit 0;

=head1 NAME

plupass - Update the password for a user in LDAP.

=head1 SYNOPSIS

plupass B<-u> <user>

=head1 DESCRIPTION

Scripting for this requires opening a pipe to this script and
printing the password to it twice, each one followed by a new
line.

=head1 SWITCHES

=head2 -u <user>

The user to update the password for.

=head1 EXIT CODES

If the exit code is not listed below, it is what was the error code returned by Plugtools.

=head2 254

No user specified.

=head2 253

The passwords are not the same.

=head1 ACKNOWLEDGEMENTS

=head1 LICENSE AND COPYRIGHT

This software is Copyright (c) 2023 by Zane C. Bowers-Hadley.

This is free software, licensed under:

  The Artistic License 2.0 (GPL Compatible)

=cut
